name: build

on:
  push:
    branches: [ "kirkstone" ]
  pull_request:
    branches: [ "kirkstone" ]
  schedule:
    - cron: "0 0 * * 5"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  prepare_container:
    runs-on: self-hosted
    outputs: 
      uid: ${{ steps.uid_step.outputs.userid }}
      gid: ${{ steps.uid_step.outputs.groupid }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Get user id/group
        id: uid_step
        run: |
          echo "userid=$(id -u)" >> "$GITHUB_OUTPUT"
          echo "groupid=$(id -g)" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: /etc/docker/cibuilder.toml

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ciserver.ci:5000
          username: ${{ secrets.CI_CACHE_REGISTRY_LOGIN }}
          password: ${{ secrets.CI_CACHE_REGISTRY_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ciserver.ci:5000/${{ github.repository_id }}:latest
          cache-from: type=registry,ref=ciserver.ci:5000/${{ github.repository_id }}:cache
          cache-to: type=registry,ref=ciserver.ci:5000/${{ github.repository_id }}:cache,mode=max
          file: conf/docker/Dockerfile
          build-args: |
            USER_ID=${{ steps.uid_step.outputs.userid }} 
            GROUP_ID=${{ steps.uid_step.outputs.groupid }}

  build_images:
    needs: prepare_container
    runs-on: self-hosted
    container: 
        image: ciserver.ci:5000/${{ github.repository_id }}:latest
        credentials:
            username: ${{ secrets.CI_CACHE_REGISTRY_LOGIN }}
            password: ${{ secrets.CI_CACHE_REGISTRY_PASSWORD }}
        options: --user "${{ needs.prepare_container.outputs.uid }}:${{ needs.prepare_container.outputs.gid }}"
    outputs: 
      build_tag: ${{ steps.tag_step.outputs.build_tag }}
    steps:
      - name: Checkout repo 
        uses: actions/checkout@v4
        with:
          path: meta-solidrun-arm-hailo

      - name: Get build tag
        id: tag_step
        run: |
          build_tag=$(date +%Y-%m-%d)_$(cd meta-solidrun-arm-hailo; git rev-parse --short HEAD)
          echo "build_tag=$build_tag" >> "$GITHUB_OUTPUT"

      - name: Set branch for kas
        if: github.event_name == 'pull_request'
        run: |
          sed -i '/meta-solidrun-arm-hailo/{:a;n;s/branch: kirkstone/branch: ${{ github.head_ref }}/;Ta}' meta-solidrun-arm-hailo/kas/hailo15-solidrun.yaml
          cat meta-solidrun-arm-hailo/kas/hailo15-solidrun.yaml
      
      - name: Checkout dependency layers
        run: |
          kas checkout meta-solidrun-arm-hailo/kas/hailo15-solidrun.yaml

      - name: Create cache dir
        run: mkdir -p buildcache

      - name: Fetch cache from server   
        uses: tespkg/actions-cache/restore@v1
        with:
          endpoint: ciserver.ci
          port: 9000
          insecure: true
          accessKey: ${{ secrets.CI_CACHE_MINIO_ACCESS }}
          secretKey: ${{ secrets.CI_CACHE_MINIO_SECRET }}
          bucket: cicache
          use-fallback: false
          key: ${{ github.repository }}
          path: |
            buildcache

      - name: Build
        shell: bash
        run: |
            iceccd --no-remote -s ciserver.ci -d
            WORKDIR=$(pwd)
            source poky/oe-init-build-env
            export CACHE_DIR="$WORKDIR/buildcache"
            export BB_ENV_PASSTHROUGH_ADDITIONS="$BB_ENV_PASSTHROUGH_ADDITIONS CACHE_DIR"
            echo "require conf/includes/ci.conf" >> conf/local.conf
            cat conf/local.conf
            bitbake core-image-minimal
    
      - name: Update cache on the server  
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: tespkg/actions-cache/save@v1
        with:
          endpoint: ciserver.ci
          port: 9000
          insecure: true
          accessKey: ${{ secrets.CI_CACHE_MINIO_ACCESS }}
          secretKey: ${{ secrets.CI_CACHE_MINIO_SECRET }}
          bucket: cicache
          use-fallback: false
          key: ${{ github.repository }}
          path: |
            buildcache

      - name: Copy deploy artifacts
        shell: bash
        run: |
            mkdir deploy
            BUILD_PATH=build/tmp/deploy/images/hailo15-solidrun
            cp $BUILD_PATH/core-image-minimal-hailo15-solidrun.wic deploy/
            cp $BUILD_PATH/core-image-minimal-hailo15-solidrun.wic.bmap deploy/
            cp $BUILD_PATH/customer_certificate.bin deploy/
            cp $BUILD_PATH/fitImage deploy/
            cp $BUILD_PATH/hailo15_scu_bl.bin deploy/
            cp $BUILD_PATH/hailo15_scu_fw.bin deploy/
            cp $BUILD_PATH/u-boot.dtb.signed deploy/
            cp $BUILD_PATH/u-boot-initial-env deploy/
            cp $BUILD_PATH/u-boot-spl.bin deploy/
            cp $BUILD_PATH/u-boot-tfa.itb deploy/
            cp $BUILD_PATH/hailo15_uart_recovery_fw.bin deploy/

      - name: Deploy to the local minio storage
        uses: yakubique/minio-upload@v1.1.3
        with:
          endpoint: http://ciserver.ci:9000
          insecure: true
          access_key: ${{ secrets.CI_CACHE_MINIO_ACCESS }}
          secret_key: ${{ secrets.CI_CACHE_MINIO_SECRET }}
          bucket: cipublish
          source: ./deploy
          target: "/${{ github.repository_id }}/${{ steps.tag_step.outputs.build_tag }}"
          recursive: true

  publish_images:
    needs: build_images
    runs-on: self-hosted
    if: github.event_name == 'push'
    steps:
      - name: Download an artifacts from MinIO
        uses: yakubique/minio-download@v1.1.1
        with:
          endpoint: http://ciserver.ci:9000
          insecure: true
          access_key: ${{ secrets.CI_CACHE_MINIO_ACCESS }}
          secret_key: ${{ secrets.CI_CACHE_MINIO_SECRET }}
          bucket: cipublish
          source: "/${{ github.repository_id }}/${{ needs.build_images.outputs.build_tag }}/"
          target: "."
          recursive: true

      - name: Assign a build tag
        run: |
            mkdir -p deploy
            tar cJf deploy/solidrun-hailo15_${{ needs.build_images.outputs.build_tag }}.tar.xz \
              ${{ github.repository_id }}/${{ needs.build_images.outputs.build_tag }}/deploy/* 

      - name: Upload to S3
        uses: shallwefootball/upload-s3-action@v1.3.3
        with:
          aws_key_id: ${{ secrets.IMAGES_S3_ACCESS }}
          aws_secret_access_key: ${{ secrets.IMAGES_S3_SECRET }}
          aws_bucket: ${{ secrets.IMAGES_S3_BUCKET }}
          endpoint: ${{ secrets.IMAGES_S3_HOST }}
          source_dir: deploy
          destination_dir: Hailo/hailo15/meta-solidrun-arm-hailo/${{ needs.build_images.outputs.build_tag }}
